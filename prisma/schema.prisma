generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MODERATOR
}

enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
  TWITTER
  GITHUB
}

enum TwoFactorMethod {
  TOTP // Time-based One-Time Password (Google Authenticator, Authy, etc.)
  SMS
  EMAIL
}

enum AuditAction {
  // Two-Factor Authentication
  TWO_FACTOR_ENABLED
  TWO_FACTOR_DISABLED
  TWO_FACTOR_VERIFIED
  TWO_FACTOR_VERIFICATION_FAILED
  TWO_FACTOR_BACKUP_CODE_USED
  TWO_FACTOR_BACKUP_CODES_REGENERATED
}

model User {
  id        String  @id @default(uuid())
  email     String  @unique
  password  String
  firstName String? @map("first_name")
  lastName  String? @map("last_name")
  role      Role    @default(USER)
  isActive  Boolean @default(true) @map("is_active")

  // Email Verification Fields
  isEmailVerified          Boolean   @default(false)
  emailVerificationToken   String?   @unique
  emailVerificationExpires DateTime?

  // Password Reset Fields
  passwordResetToken           String?   @unique
  passwordResetExpires         DateTime?
  passwordResetAttempts        Int       @default(0)
  passwordResetAttemptsExpires DateTime?
  passwordChangedAt            DateTime?

  // Two-Factor Authentication Fields
  twoFactorEnabled     Boolean         @default(false) @map("two_factor_enabled")
  twoFactorSecret      String?         @map("two_factor_secret") // Encrypted TOTP secret
  twoFactorBackupCodes String[]        @default([]) @map("two_factor_backup_codes") // Encrypted backup codes
  twoFactorEnabledAt   DateTime?       @map("two_factor_enabled_at")
  twoFactorLastUsedAt  DateTime?       @map("two_factor_last_used_at")
  twoFactorMethod      TwoFactorMethod @default(TOTP) @map("two_factor_method")

  // OAuth fields
  googleId   String?      @unique
  facebookId String?      @unique
  twitterId  String?      @unique
  githubId   String?      @unique
  provider   AuthProvider @default(LOCAL)
  avatar     String?

  // Account Lockout Fields
  failedLoginAttempts   Int            @default(0)
  lockedUntil           DateTime?
  lockReason            String?
  lastFailedLoginAt     DateTime?
  lastSuccessfulLoginAt DateTime?
  loginHistory          LoginHistory[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  refreshTokens RefreshToken[]

  @@index([email])
  @@index([emailVerificationToken])
  @@index([passwordResetToken])
  @@index([lockedUntil])
  @@index([googleId])
  @@index([githubId])
  @@index([facebookId])
  @@map("users")
}

model RefreshToken {
  id        String  @id @default(uuid())
  token     String  @unique
  userId    String  @map("user_id")
  deviceId  String? @map("device_id")
  userAgent String? @map("user_agent")
  ipAddress String? @map("ip_address")

  // Enhanced session information
  deviceName String?   @map("device_name")
  deviceType String?   @map("device_type")
  browser    String?
  os         String?
  location   Json?
  lastUsedAt DateTime? @map("last_used_at")
  isCurrent  Boolean   @default(false) @map("is_current")

  expiresAt DateTime  @map("expires_at")
  createdAt DateTime  @default(now()) @map("created_at")
  isRevoked Boolean   @default(false) @map("is_revoked")
  revokedAt DateTime? @map("revoked_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([deviceId])
  @@index([lastUsedAt])
  @@map("refresh_tokens")
}

model LoginHistory {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  success       Boolean
  ipAddress     String?
  userAgent     String?
  deviceId      String?
  failureReason String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
  @@index([success])
  @@map("login_history")
}
